/*
 * Licensed to the Sakai Foundation (SF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The SF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */


package org.sakaiproject.sdata.tool.api;

/**
 * A resource definition defines a resource associated with each request. It is
 * generated by a ResourceDefinitionFactory
 * 
 */
public interface ResourceDefinition {

  /**
   * Get the native path in the repository for the resource. This is the full
   * path in repository terms of the resource.
   * 
   * @return the canonical repository path for the resource defined by this
   *         ResourceDefinition.
   */
  String getRepositoryPath();

  /**
   * <p>
   * convert the path of the passed in path relative to the repository resource
   * defined by this ResourceDefinition into an external path with the
   * containing repository path parts removed.
   * </p>
   * <p>
   * <b>Example:
   * </p>
   * Hence if ResoruceDefinition has a getRepositoryPath() of
   * /repo1/mount2/volume2/classes/A32421/description.json the repository
   * location of this ResourceDefinition would be /repo1/mount2/volume2, so that
   * is I asked for the external path of
   * /repo1/mount2/volume2/session/124/schedule.json I would get
   * session/124/schedule.json. I might then append that to the URL I used to
   * address this resource. Consequently this is what is meant by an external,
   * with all traces of non external repository path space removed. path. </p>
   * 
   * @param path
   *          a path absolute or relative to this resource.
   * @return the external path to this resource in the terms of this Resource
   *         definition.
   */
  String convertToExternalPath(String path);

  /**
   * Convert the passed in relative path, which is relative to the resource
   * defined by this ResourceDefinition into an absolute path into the
   * repository.
   * 
   * <p>
   * <b>Example:</b> The ResourceDefinition defined
   * /repo1/volumes2/mount3/classses/A213, calling this method with
   * description.json will result in
   * /repo1/volumes2/mount3/classses/A213/description.json. Please note, the
   * ResourceDefinition does not make any assumptions about a path pointing to a
   * container or not and so it is the responsibility of the caller to make
   * certain the call makes sense. If the resource is a file
   * /repo1/volumes2/mount3/classses/A213/description.json then calling with
   * image.jpg will result in
   * /repo1/volumes2/mount3/classses/A213/description.json/image.jpg which may
   * or may not be the desired effect. So the caller should determine if a
   * parent path needs to be created before generating absolute repository path.
   * </p>
   * 
   * @param relativePath
   *          a path, relative to this ResourceDefinition
   * @return an absolute path in repository terms.
   */
  String convertToAbsoluteRepositoryPath(String relativePath);

  /**
   * Does the path represent a resource that is private for the current request
   * This may relate to a logged in user or context. This will control the
   * caching headers in the http response.
   * 
   * @return
   */
  boolean isPrivate();

  /**
   * @return The function to be performed on this resource.
   */
  String getFunctionDefinition();

  /**
   * @return the number of levels of child nodes below the resource defined by
   *         this ResourceDefintion to which this ResourceDefinition limits its
   *         scope. If returning information on this resource, the depth of the
   *         ResourceDefinition will be consulted to determine how many levels
   *         of child nodes to be included in the response.
   */
  int getDepth();

  /**
   * 
   * @return the parent ResourceDefinition.
   * @throws SDataException
   *           is permission is denied.
   */
  ResourceDefinition getParentResourceDefinition() throws SDataException;
  
  
  String getVersion();

}
