diff --git a/component-manager/src/main/java/org/sakaiproject/util/SakaiApplicationContext.java b/component-manager/src/main/java/org/sakaiproject/util/SakaiApplicationContext.java
index 622f65d..7e66fb4 100644
--- a/component-manager/src/main/java/org/sakaiproject/util/SakaiApplicationContext.java
+++ b/component-manager/src/main/java/org/sakaiproject/util/SakaiApplicationContext.java
@@ -17,12 +17,13 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
-*
-**********************************************************************************/
+ *
+ **********************************************************************************/
 
 package org.sakaiproject.util;
 
 import java.io.IOException;
+import java.io.InputStream;
 
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
@@ -32,93 +33,114 @@ import org.springframework.beans.factory.xml.ResourceEntityResolver;
 import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;
 import org.springframework.context.ApplicationContextException;
 import org.springframework.context.support.GenericApplicationContext;
+import org.springframework.core.io.ClassPathResource;
+import org.springframework.core.io.InputStreamResource;
+import org.springframework.core.io.Resource;
+import org.springframework.core.io.UrlResource;
 
 /**
- * Hook some Sakai-specific operations into the normal ApplicationContext
- * refresh cycle: read component manager configuration files, give creators of
- * PostProcessor objects (e.g., SakaiProperties) a chance to do their work,
- * and load a few central components before the rest.
+ * Hook some Sakai-specific operations into the normal ApplicationContext refresh cycle: read
+ * component manager configuration files, give creators of PostProcessor objects (e.g.,
+ * SakaiProperties) a chance to do their work, and load a few central components before the rest.
  */
 public class SakaiApplicationContext extends GenericApplicationContext {
-	private String[] initialSingletonNames;
-	private String[] configLocations;
+  private String[] initialSingletonNames;
+  private String[] configLocations;
+
+  public SakaiApplicationContext() {
+    super(new NoisierDefaultListableBeanFactory());
+  }
+
+  /**
+   * Load component manager configurations. A more normal hook for this is the "refreshBeanFactory"
+   * method, but it's declared final by GenericApplicationContext.
+   */
+  protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) {
+    super.prepareBeanFactory(beanFactory);
+    try {
+      loadBeanDefinitions(beanFactory);
+    } catch (IOException e) {
+      throw new ApplicationContextException(
+          "I/O error parsing XML document for application context [" + getDisplayName() + "]", e);
+    }
+  }
+
+  protected void loadBeanDefinitions(ConfigurableListableBeanFactory beanFactory)
+      throws IOException {
+    // Create a new XmlBeanDefinitionReader for the given BeanFactory.
+    XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(
+        (BeanDefinitionRegistry) beanFactory);
+//    beanDefinitionReader.setBeanClassLoader(Thread.currentThread().getContextClassLoader());
+    beanDefinitionReader.setBeanClassLoader(this.getClass().getClassLoader());
+    beanDefinitionReader.setResourceLoader(this);
+    beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));
+
+    if (configLocations != null) {
+      Resource[] resources = new Resource[configLocations.length];
+      logger.info("============== NConfigs =  " + configLocations.length);
 
-	public SakaiApplicationContext() {
-		super(new NoisierDefaultListableBeanFactory());
-	}
-	
-	/**
-	 * Load component manager configurations. A more normal hook for this is
-	 * the "refreshBeanFactory" method, but it's declared final by GenericApplicationContext.
-	 */
-	protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) {
-		super.prepareBeanFactory(beanFactory);
-		try {
-			loadBeanDefinitions(beanFactory);
-		} catch (IOException e) {
-			throw new ApplicationContextException("I/O error parsing XML document for application context [" + getDisplayName() + "]", e);
-		}
-	}
+      for (int i = 0; i < configLocations.length; i++) {
+        if (configLocations[i].startsWith("classpath:")) {
+          resources[i] = new ClassPathResource(configLocations[i].substring("classpath:".length()),this.getClass().getClassLoader());
+        } else {
+          resources[i] = new UrlResource(configLocations[i]);
+        }
+      }
+      beanDefinitionReader.loadBeanDefinitions(resources);
+    }
+  }
 
-	protected void loadBeanDefinitions(ConfigurableListableBeanFactory beanFactory) throws IOException {
-		// Create a new XmlBeanDefinitionReader for the given BeanFactory.
-		XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader((BeanDefinitionRegistry)beanFactory);
-		beanDefinitionReader.setBeanClassLoader(Thread.currentThread().getContextClassLoader());
-		beanDefinitionReader.setResourceLoader(this);
-		beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));
+  /**
+   * Before post-processing, load beans which have declared that they want to add post-processors
+   * dynamically.
+   */
+  protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {
+    invokePostProcessorCreators(beanFactory);
+    super.postProcessBeanFactory(beanFactory);
+  }
 
-		if (configLocations != null) {
-			beanDefinitionReader.loadBeanDefinitions(configLocations);
-		}
-	}
-	
-	/**
-	 * Before post-processing, load beans which have declared that they want to add post-processors
-	 * dynamically.
-	 */
-	protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {
-		invokePostProcessorCreators(beanFactory);
-		super.postProcessBeanFactory(beanFactory);
-	}
-	
-	/**
-	 * Load initial beans before going through the default logic.
-	 */
-	protected void onRefresh() throws BeansException {
-		if (initialSingletonNames != null) {
-			for (int i = 0; i < initialSingletonNames.length; i++)	{
-				getBean(initialSingletonNames[i]);
-			}
-		}
-		super.onRefresh();
-	}
+  /**
+   * Load initial beans before going through the default logic.
+   */
+  protected void onRefresh() throws BeansException {
+    if (initialSingletonNames != null) {
+      for (int i = 0; i < initialSingletonNames.length; i++) {
+        getBean(initialSingletonNames[i]);
+      }
+    }
+    super.onRefresh();
+  }
 
-	/**
-	 * Add bean-created post processors.
-	 * @param beanFactory
-	 */
-	public void invokePostProcessorCreators(ConfigurableListableBeanFactory beanFactory) {
-		String[] postProcessorCreatorNames = beanFactory.getBeanNamesForType(BeanFactoryPostProcessorCreator.class, false, false);
-		for (int i = 0; i < postProcessorCreatorNames.length; i++) {
-			BeanFactoryPostProcessorCreator postProcessorCreator = (BeanFactoryPostProcessorCreator)beanFactory.getBean(postProcessorCreatorNames[i]);
-			for (BeanFactoryPostProcessor beanFactoryPostProcessor : postProcessorCreator.getBeanFactoryPostProcessors()) {
-				addBeanFactoryPostProcessor(beanFactoryPostProcessor);
-			}
-		}
-	}
+  /**
+   * Add bean-created post processors.
+   *
+   * @param beanFactory
+   */
+  public void invokePostProcessorCreators(ConfigurableListableBeanFactory beanFactory) {
+    String[] postProcessorCreatorNames = beanFactory.getBeanNamesForType(
+        BeanFactoryPostProcessorCreator.class, false, false);
+    for (int i = 0; i < postProcessorCreatorNames.length; i++) {
+      BeanFactoryPostProcessorCreator postProcessorCreator = (BeanFactoryPostProcessorCreator) beanFactory
+          .getBean(postProcessorCreatorNames[i]);
+      for (BeanFactoryPostProcessor beanFactoryPostProcessor : postProcessorCreator
+          .getBeanFactoryPostProcessors()) {
+        addBeanFactoryPostProcessor(beanFactoryPostProcessor);
+      }
+    }
+  }
 
-	/**
-	 * @param initialSingletonNames initial configuration beans to load, behaving
-	 * as universal "dependsOn" targets
-	 */
-	public void setInitialSingletonNames(String[] initialSingletonNames) {
-		this.initialSingletonNames = initialSingletonNames;
-	}
+  /**
+   * @param initialSingletonNames initial configuration beans to load, behaving as universal
+   *          "dependsOn" targets
+   */
+  public void setInitialSingletonNames(String[] initialSingletonNames) {
+    this.initialSingletonNames = initialSingletonNames;
+  }
 
-	/**
-	 * @param configLocations file paths of XML bean definition files to load before refresh
-	 */
-	public void setConfigLocations(String[] configLocations) {
-		this.configLocations = configLocations;
-	}
+  /**
+   * @param configLocations file paths of XML bean definition files to load before refresh
+   */
+  public void setConfigLocations(String[] configLocations) {
+    this.configLocations = configLocations;
+  }
 }
